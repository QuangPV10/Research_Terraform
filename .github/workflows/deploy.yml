name: Deploy Website with Terraform

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_VAR_bucket_name: ${{ secrets.TF_VAR_BUCKET_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: terraform plan -no-color

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && steps.plan.outcome == 'success'
        working-directory: ./terraform
        run: terraform apply -auto-approve

      - name: Sync files to S3
        if: steps.apply.outcome == 'success'
        working-directory: ./
        run: aws s3 sync ./src s3://${{ secrets.TF_VAR_BUCKET_NAME }} --delete

      - name: Get CloudFront Distribution ID
        id: get_distribution_id
        if: steps.apply.outcome == 'success'
        working-directory: ./terraform
        run: echo "DIST_ID=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

      - name: Invalidate CloudFront Cache
        if: steps.apply.outcome == 'success'
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.get_distribution_id.outputs.DIST_ID }} --paths "/*"
